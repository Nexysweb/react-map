{"version":3,"sources":["layout.tsx","lib/geo.ts","lib/map.tsx","App.tsx","router.tsx","serviceWorker.ts","index.tsx"],"names":["style","borderTop","borderBottom","boxShadow","menus","name","link","Layout","props","header","className","to","map","menu","i","key","Fragment","children","getAddressString","address","a","street","postalcode","city","county","state","country","x","join","latLonFromAddress","addressString","uAddress","encodeURI","url","fetch","then","json","r","Error","Loading","LoadingComponent","width","height","zoomLevel","lang","frameBorder","border","tabIndex","React","useState","geoUrl","setUrl","Geo","lat","lon","apiKey","q","cs","hl","z","output","Uurl","paramsToString","err","console","warn","src","aria-hidden","App","setAddress","addressMap","setAddressMap","type","value","onChange","target","onClick","NotFound","withRouter","exact","path","component","Main","Boolean","window","location","hostname","match","history","History","basename","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.543c52f2.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nconst style = {\n  borderTop: '1px solid #e5e5e5',\n  borderBottom: '1px solid #e5e5e5',\n  boxShadow: '0 .25rem .75rem rgba(0, 0, 0, .05)'\n}\n\nconst title = 'React Map';\n\nconst prefix = '';// process.env.PUBLIC_URL || '';\n\nconst menus = [ \n  {name: 'Main', link: '/'},\n];\n\n/*.map(x => {\n  x.link = prefix + x.link;\n  return x;\n})*/\n\n\nfunction Layout(props:any) {\n  const header = (<header>\n    <div style={style} className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white\">\n    <h5 className=\"my-0 mr-md-auto font-weight-normal\"><Link to={prefix + '/'}>{title}</Link></h5>\n    <nav className=\"my-2 my-md-0 mr-md-3\">\n    {menus.map((menu,i) => <Link className=\"p-2 text-dark\" key={i} to={menu.link}>{menu.name}</Link>)}\n    </nav>\n  </div>\n  </header>);\n\n  return (<React.Fragment>{header}<div className=\"container\">{props.children}</div></React.Fragment>);\n}\nexport default Layout;","import * as T from './type'\nimport { url as Uurl } from '@nexys/utils'\n\nconst addressToString = (a:Partial<T.Address>) :string=> [a.street, a.postalcode, a.city, a.county, a.state, a.country]\n  .map(x => x ? x : '')\n  .join(',')\n\nconst getAddressString =  (address: string | Partial<T.Address>):string => {\n  if (typeof address === 'string') {\n    return address;\n  }\n\n  return addressToString(address);\n}\n\nexport const latLonFromAddress = async (address: string | Partial<T.Address>):Promise<T.Nominatim[]> => {\n  const addressString = getAddressString(address)\n  const uAddress = encodeURI(addressString)\n  const url = `https://nominatim.openstreetmap.org/search.php?q=${uAddress}&format=json`\n  const r = await fetch(url).then(x => x.json())\n\n  if (r === []) {\n    throw Error('No address could be found')\n  }\n\n  return r;\n  //https://nominatim.openstreetmap.org/search.php?street=Rte+de+Crassier+7&city=Eysins&county=&state=&country=Switzerland&postalcode=&format=json\n}\n\nexport const mapFromLatLon = (lat: string, lon: string, zoomLevel: number, apiKey?: string, lang: string = 'en'):string => {\n  const q = lat + ',' + lon\n\n  const cs = {\n    q,\n    hl: lang,\n    z: zoomLevel,\n    output: 'embed',\n    key: apiKey\n  }\n\n  return'https://maps.google.com/maps?' + Uurl.paramsToString(cs)\n}","import React from 'react';\n\nimport * as Geo from './geo';\nimport * as T from './type';\n\nconst Loading = () => <p><i>Loading</i></p>\n\nexport default (props: T.Props) => {\n  const {\n    address,\n    LoadingComponent = <Loading/>,\n    width = 600,\n    height = 450,\n    zoomLevel = 14,\n    lang = 'en',\n    frameBorder = 0,\n    style = {border:0},\n    tabIndex = 0\n  } = props;\n  const [ geoUrl, setUrl ] = React.useState<string | null>(null);\n\n  try {\n    Geo.latLonFromAddress(address).then(x => {\n      const { lat, lon } = x[0];\n\n      const url = Geo.mapFromLatLon(lat, lon, zoomLevel, props.apiKey, lang);\n      setUrl(url)\n    })\n  } catch (err) {\n    console.warn(err);\n  }\n\n  if (!geoUrl) {\n    return LoadingComponent\n  }\n\n  return<iframe\n    src={geoUrl}\n    width={width}\n    height={height}\n    frameBorder={frameBorder}\n    style={style} \n    aria-hidden=\"false\"\n    tabIndex={tabIndex}\n  ></iframe>\n}","import React from 'react';\n\nimport {Map, Type} from './lib';\n\nfunction App() {\n  const addressDefault:Partial<Type.Address> = {street:'Champ de Mars 5', country: 'France', postalcode: '75007' , city: 'Paris'}\n  const [ address, setAddress ] = React.useState<string>('La Tour Eiffel')\n  const [ addressMap, setAddressMap ] = React.useState<string | Partial<Type.Address>>(addressDefault)\n\n  const handleClick = () => {\n    setAddressMap(address)\n  }\n\n  return (\n    <>\n    <h3>Address shown on map</h3>\n    <input type=\"text\" value={address} onChange={x => setAddress(x.target.value)}/>\n    <button onClick={handleClick}>Update</button>\n    <br/>\n    <Map address={addressMap}/>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport {\n  Switch,\n  Route,\n  withRouter\n} from 'react-router-dom';\n\nimport Layout from './layout';\n\n\nimport Main from './App';\n\nconst NotFound = () => <p>Page Not Found</p>;\n\nfunction Router(props:any) {\n  return (<Layout>\n    <Switch>\n      <Route exact path={'/'} component={Main} />\n      <Route path=\"/\" component={NotFound} />\n    </Switch>\n  </Layout>);\n}\n\nexport default withRouter(Router);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Router } from 'react-router-dom';\nimport * as History from 'history';\n\nimport RouterApp from './router';\nimport * as serviceWorker from './serviceWorker';\n\nconst history = History.createBrowserHistory({\n  basename: process.env.PUBLIC_URL || '',\n});\n\nReactDOM.render(<Router history={history}><RouterApp/></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}